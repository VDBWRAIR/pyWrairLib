[Paths]
ANALYSIS_DIR = '/home/EIDRUdata/Analysis/PipelineRuns'
PRIMER_DIR = '${ANALYSIS_DIR}/Primer'
# The main data directory
NGSDATA_DIR = '/home/EIDRUdata/NGSData'
MIDPARSEDEFAULT = '${NGSDATA_DIR}/MidParse.conf'

    # Data Directories that contain Read data
    [[DataDirs]]
    # Where the directories named after each sample should be put
    READSBYSAMPLE_DIR = '${NGSDATA_DIR}/ReadsBySample'
    # Where the raw data from the machine goes
    RAWDATA_DIR = '${NGSDATA_DIR}/RawData'
    # Where the Read data from the machine goes
    # For some instruments Raw & Read are the same
    #  but you still need to have a different directory
    #  The files will just be links anyways
    READDATA_DIR = '${NGSDATA_DIR}/ReadData'

    # here you can configure the paths to all of the newbler scripts
    [[Newbler]]
    # This is simply a variable to make your life easier. The other scripts can refer to this
    # path using ${base}
    # Typically newbler is installed into /opt/454/ but you can modify this to point
    # to a custom location that it is installed
    base = '/home/EIDRUdata/programs/newbler_v2.8'
    # Path to sfffile command
    sfffile = '${base}/bin/sfffile'
    # Path to runProject
    runproject = '${base}/bin/runProject'
    # Path to addRun
    addrun = '${base}/bin/addRun'
    # Path to setRef
    setref = '${base}/bin/setRef'
    # Path to newMapping
    newmapping = '${base}/bin/newMapping'

[DEFAULT]
LOG_LEVEL = DEBUG
# Owner Id for files generated
Owner = 603
# Group Id for files generated
Group = 499
# Permissions for files generated
Perms = 0755
# Number of cpu's to use
CPUS = 20
# These are all regular expressions for each 'piece' of the naming conventions below
samplename = '(?P<samplename>\S+?)'
region = '(?P<region>[0-9])'
midkey = '(?P<midkey>[A-Z]{2}\d+)'
date = '(?P<year>\d{4})_(?P<month>\d{2})_(?P<day>\d{2})'
virus = '(?P<virus>[a-zA-Z0-9]+)'
extension = '(?P<extension>ab1|fastq|sff)'
primer = '(?P<primer>[FR]\d+)'

# Valid Platforms
# Each section cooresponds to the directories found inside of the
#  NGSDATA_DIR's RAWDATA_DIR, READDATA_DIR and READSBYSAMPLE_DIR
# Each section must contain a read_in_format and read_out_format which specifies
#  the naming convention that will be followed for that platform
# read_in_format must be a valid regular expression and must contain a match group named samplename(?P<samplename>)
[Platforms]
    [[Sanger]]
    read_in_format = '^${samplename}__${primer}__Sanger__${date}__(?P<virus>[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+){0,1})\.${extension}$'
    read_out_format = '{samplename}__{primer}__Sanger__{date}__{virus}.{extension}'
    [[Roche454]]
    # rawread formats are to parse the output files from sfffile
    rawread_in_format = '454Reads\.MID${midkey}.sff'
    rawread_out_format = '454Reads.MID{midkey}.sff'
    read_in_format = '${samplename}__${region}__${midkey}__${date}__${virus}.${extension}'
    read_out_format = '{samplename}__{region}__{midkey}__{date}__{virus}.{extension}'
    [[IonTorrent]]
    filename_pattern = '%s__%s__%s__%s.%s'
    read_in_format = '${samplename}__${region}__${midkey}__${date}__${virus}.${extension}'
    read_out_format = '{samplename}__{region}__{midkey}__{date}__{virus}.{extension}'

[WrairReference]
file_out_format = '{virus}__{location}{isolate}__{year}.fasta'
file_in_format = '(?P<virus>[a-zA-z0-9]+)__(?P<location>\w+)__(?P<year>\d{4}).fasta'
seq_out_format = '{carrot}{virus}/{accession}/{location}{isolate}/{year}/{geneab}_{geneno}'
seq_in_format = '(?P<carrot>\>){0,1}(?P<virus>\w+)/(?P<accession>\w+)/(?P<location>[a-zA-Z]+)(?P<isolate>[0-9.]+)/(?P<year>\d+)/(?P<geneab>\w+)_(?P<geneno>\d)$'

[GsProject]
directory_out_format = '{samplename}__{midkey}__{virus}'
directory_in_format = '${samplename}__${midkey}__${virus}'

# Logging configuration
# See: http://docs.python.org/2/howto/logging.html
# for more options
# This setup logs everything to the console as well as to a file named logfile.log
# Only the output tagged as INFO is logged to the console
[Logging]
version = 1
    [[formatters]]
        [[[simple]]]
            format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    [[handlers]]
        [[[console]]]
            class = 'logging.StreamHandler'
            level = 'INFO'
            formatter = 'simple'
            stream = 'ext://sys.stdout'
        [[[logfile]]]
            class = 'logging.FileHandler'
            level = 'DEBUG'
            formatter = 'simple'
            filename = 'logfile.log'
    [[loggers]]
        [[[wrair]]]
            level = 'DEBUG'
            handlers = console,logfile
            propagate = 'False'
        [[[root]]]
          level = 'DEBUG'
          handlers = console,
